<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Ruizhe Zhao / kumasento</title><link>https://kumasento.github.io/post/</link><description>Recent content in Blog on Ruizhe Zhao / kumasento</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://kumasento.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>glog, gflags, and C++ ABI</title><link>https://kumasento.github.io/2020-06-12-glog-gflags-and-c-abi/</link><pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate><guid>https://kumasento.github.io/2020-06-12-glog-gflags-and-c-abi/</guid><description>I recently got back to one of my previous project, which uses the two excellent Google-developed libraries: glog and gflags. My project used to work well, but since the time I&amp;rsquo;ve been away is long, and the system has been upgraded and modified by others somehow, it unfortunately cannot be successfully built, and the major problem lied in glog and gflags. The error message is as follows:
undefined reference to `google::base::CheckOpMessageBuilder::NewString[abi:cxx11]()' Luckily, I have fixed this problem in the end and realized that the key problem was related to the C++ ABI, but the whole progress of locating and resolving the problem was exhaustive and tedious.</description></item><item><title>Setting up development environment for the barvinok library</title><link>https://kumasento.github.io/2020-07-04-setting-up-development-environment-of-the-barvinok-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kumasento.github.io/2020-07-04-setting-up-development-environment-of-the-barvinok-library/</guid><description>barvinok is an excellent library for research and development on polyhedral model. It is currently being actively maintained by people of INRIA.
I&amp;rsquo;m still learning about it so this post I won&amp;rsquo;t talk about how barvinok works. Instead, I would like to introduce how I managed to successfully install this library. I have a subtle complaint about the installation instructions listed in barvinok&amp;rsquo;s README. Hopefully, this post can help others who try install barvinok on their machine and easily begin their polyhedral journey.</description></item><item><title>TypeSwitch in LLVM ADT</title><link>https://kumasento.github.io/2020-06-28-typeswitch-in-llvm-adt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kumasento.github.io/2020-06-28-typeswitch-in-llvm-adt/</guid><description>This post summarizes what I&amp;rsquo;ve learned after viewing the source code of TypeSwitch, which I think is neatly implemented and has much to learn.`
Usage Operation *op = ...; LogicalResult result = TypeSwitch&amp;lt;Operation *, LogicalResult&amp;gt;(op) .Case&amp;lt;ConstantOp&amp;gt;([](ConstantOp op) { ... }) .Default([](Operation *op) { ... }); TypeSwitch has two template arguments: T the type of the input, and ResultT, the type of the result from the switch statement; Each Case tries to match the input element to the template type of that Case.</description></item></channel></rss>